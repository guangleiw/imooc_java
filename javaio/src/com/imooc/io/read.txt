java.io.File 类用于表示文件或者 目录
File只用于表示文件、目录的信息 如名称 大小等 不能用于文件内容的访问

RandomAccessFile Java提供的对文件内容的访问  既可以读 也可以写文件
可以随机访问文件  可以访问文件的任意位置

(1)Java 文件模型：
	在硬盘上的文件是byte byte byte 存储的，是数据的集合
(2)打开方式
	有两种模式“rw” “r” 
	RandomAccessFile raf = new RandomAccessFile(file,"rw")
	文件指针  打开文件时 指针在开头 pointer=0;
(3)写方法
	raf.write(int)  --> 只写一个字节 （后8位），同时指针指向下一个位置，准备再次写入
(4)读方法
	int b = raf.read(); -- > 读一个字节
(5)文件读写完之后一定要关闭


IO流（输入流 输出流）
字节流 字符流
1.字节流
	InputStream OutputStream
	Inputstream 抽象了应用程序读取数据的方式
	
	EOF = end 读到-1 就到结尾
	
	重要的方法 ：输入流的基本方法 int b = in.read();读取一个字节  无符号填充到int的低8位 -1是EOF
			in.read(byte[] buf);
			in.read(byte[] buf,int start,int size);
			输出流 基本方法: out.write(int b) 写出一个byte到流  写的是b的低8位
			out.write(byte[] buf) 将buf字节数组直接写入到流
			out.write(byte[] buf int start,int size);
			
	FileInputStream -- > 具体实现了在文件上读取数据
	DataOutputStream DataInputStream 对“流”功能 的扩展 可以更方便的读取 int long 字符等类型数据
	writeInt() writeDouble() writeUTF()
	
	BufferedInputStream & BufferedOutputStream
	这两个流类为IO提供了带缓冲区的操作 一般打开文件进行写入或读取操作时 都会加上缓冲 这种流模式提高了性能从应用程序中把输入放入文件
	相当于将一缸水倒入到另一个缸中：FileOutputStream -->write方法相当于一滴一滴地把水转移过去
	DataOutputStream -->writeXxx 方法会方便一些 相当于一瓢一瓢的把水移过去
	BufferedOutputStream -->write 方法相当于一瓢一瓢先放入桶中，再从桶中倒入到缸中
    		
	
	
	